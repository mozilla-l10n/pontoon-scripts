"""
This script takes a CSV file generated by pretranslation_evaluation.py,
and adds the TER score as an additional column.

The output is saved as a new file, with added `_TER` at the end.

This script requires the sacreblue module.
"""

from pathlib import Path
from sacrebleu.metrics import BLEU, CHRF, TER
import argparse
import csv
import os


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "csv_file",
        help="Path to CSV file",
    )
    args = parser.parse_args()

    csv_orig = os.path.realpath(args.csv_file)
    csv_new = os.path.join(os.path.dirname(csv_orig), f"{Path(csv_orig).stem}_TER.csv")

    ter = TER()
    bleu = BLEU(effective_order=True)
    chrf = CHRF()
    with open(csv_orig) as f:
        reader = csv.DictReader(f, quotechar="ยง")
        new_content = []
        for row in reader:
            new_row = row
            try:
                if new_row["Rejected"] == "":
                    scores = {
                        "TER": 0,
                        "BLEU": 0,
                        "CHRF": 0,
                    }
                else:
                    scores = {
                        "TER": ter.sentence_score(row["Rejected"], [row["Approved"]]).format(score_only=True),
                        "BLEU": bleu.sentence_score(row["Rejected"], [row["Approved"]]).format(score_only=True),
                        "CHRF": chrf.sentence_score(row["Rejected"], [row["Approved"]]).format(score_only=True),
                    }

                for alg, score in scores.items():
                    new_row[alg] = float(score)
                del new_row["Approved"]
                del new_row["Rejected"]
                new_content.append(new_row)
            except Exception as e:
                print(e)

    with open(csv_new, "w") as f:
        writer = csv.DictWriter(
            f,
            list(new_content[0].keys()),
            quoting=csv.QUOTE_NONNUMERIC,
        )
        writer.writeheader()
        for row in new_content:
            writer.writerow(row)


if __name__ == "__main__":
    main()
